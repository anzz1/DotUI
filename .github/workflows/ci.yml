name: CI
on:
  workflow_dispatch: # allows manual triggering
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: anzz1/miyoomini-toolchain:latest
      options: --user root
    steps:
    - name: Checkout repository
      id: checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Build
      id: make_build
      shell: bash
      run: |
        source /root/.bashrc && \
        make RELEASE_DOT="$(git ls-remote --tags origin "$(date +%Y%m%d)*" | wc -l)" && \
        export DOT_RELEASE_NAME="$(head -1 ./build/latest.txt)" && \
        export DOT_RELEASE_TAG="$(cut -d- -f3- ./build/latest.txt)" && \
        chmod +x ./.github/job-summary.sh && \
        ./.github/job-summary.sh >> "$GITHUB_STEP_SUMMARY" && \
        echo "DOT_RELEASE_NAME="$DOT_RELEASE_NAME"" >> "$GITHUB_ENV" && \
        echo "DOT_RELEASE_TAG="$DOT_RELEASE_TAG"" >> "$GITHUB_ENV" && \
        EOF="$(dd if=/dev/urandom bs=15 count=1 status=none | base64)" && \
        echo "DOT_JOB_SUMMARY<<$EOF" >> "$GITHUB_ENV" && \
        cat "$GITHUB_STEP_SUMMARY" >> "$GITHUB_ENV" && \
        echo "$EOF" >> "$GITHUB_ENV"
    - name: Create release
      id: create_release
      if: ${{ github.event.inputs.create_release == 'true' }}
      uses: anzz1/action-create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.DOT_RELEASE_TAG }}
        release_name: ${{ env.DOT_RELEASE_NAME }}
        body: ${{ env.DOT_JOB_SUMMARY }}
    - name: Upload release
      id: upload_release
      if: ${{ github.event.inputs.create_release == 'true' }}
      uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const path = require('path');
          const fs = require('fs');
          const release_id = '${{ steps.create_release.outputs.id }}';
          for (let file of await fs.readdirSync('./releases')) {
            if (path.extname(file) === '.zip') {
              console.log('uploadReleaseAsset', file);
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release_id,
                name: file,
                data: await fs.readFileSync(`./releases/${file}`)
              });
            }
          }
